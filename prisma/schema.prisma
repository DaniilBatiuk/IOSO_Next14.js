// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  fullName      String
  password      String
  email         String       @unique
  emailVerified DateTime?
  image         String?
  quiz          Quiz[]
  groups        Group[]
  Membership    Membership[]
}

model Quiz {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  attempts   Int?
  duration   DateTime?
  deadline   DateTime?
  accessType AccessTypeForQuiz
  accessCode String?
  groupId    String?
  questions  Question[]
  creatorId  String            @db.ObjectId
  creator    User              @relation(fields: [creatorId], references: [id])
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  Section    Section?          @relation(fields: [sectionId], references: [id])
  sectionId  String?           @db.ObjectId
}

model Question {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  type      QuestionType
  answers   Answer[]
  quizId    String       @db.ObjectId
  quiz      Quiz         @relation(fields: [quizId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  isCorrect  Boolean
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Group {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  name       String             @unique
  accessType AccessTypeForGroup
  accessCode String?
  creatorId  String             @db.ObjectId
  creator    User               @relation(fields: [creatorId], references: [id])
  sections   Section[]
  members    Membership[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Section {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  quizzes   Quiz[]
  groupId   String   @db.ObjectId
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  userId  String       @db.ObjectId
  groupId String       @db.ObjectId
  status  MemberStatus @default(Participant)
  user    User         @relation(fields: [userId], references: [id])
  group   Group        @relation(fields: [groupId], references: [id])
}

enum AccessTypeForGroup {
  Public
  Public_access_code
}

enum MemberStatus {
  Participant
  Manager
}

enum AccessTypeForQuiz {
  Public
  Private
  Public_access_code
  Group
}

enum QuestionType {
  Single_choice
  Multiple_choice
  True_or_false
}

// model User {
//   id        String    @id @default(auto()) @map("_id") @db.ObjectId
//   fullName  String
//   email     String    @unique
//   password  String
//   quizzes   QuizResult[]
//   groups    Membership[]
// }

// model Quiz {
//   id          String     @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   attempts    Int
//   duration    String
//   deadline    String
//   accessType  String
//   accessCode  String?
//   groupId     String?
//   creatorId   String
//   questions   Question[]
//   results     QuizResult[]
//   creator     User       @relation(fields: [creatorId], references: [id])
//   group       Group?     @relation(fields: [groupId], references: [id])
// }

// model Group {
//   id        String     @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   accessType String
//   accessCode String?
//   managerId String
//   manager   User       @relation(fields: [managerId], references: [id])
//   members   Membership[]
//   sections  Section[]
// }

// model Section {
//   id        String     @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   groupId   String
//   group     Group      @relation(fields: [groupId], references: [id])
// }

// model Membership {
//   userId    String
//   groupId   String
//   status    String
//   user      User       @relation(fields: [userId], references: [id])
//   group     Group      @relation(fields: [groupId], references: [id])
//   @@id([userId, groupId])
// }

// model QuizResult {
//   id          String     @id @default(auto()) @map("_id") @db.ObjectId
//   userId      String
//   quizId      String
//   score       Int
//   totalQuestions Int
//   percentage  Int
//   user        User       @relation(fields: [userId], references: [id])
//   quiz        Quiz       @relation(fields: [quizId], references: [id])
// }

// model Question {
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   text     String
//   type     String
//   quizId   String
//   quiz     Quiz      @relation(fields: [quizId], references: [id])
//   answers  Answer[]
// }

// model Answer {
//   id         String    @id @default(auto()) @map("_id") @db.ObjectId
//   text       String
//   isCorrect  Boolean
//   questionId String
//   question   Question  @relation(fields: [questionId], references: [id])
// }
